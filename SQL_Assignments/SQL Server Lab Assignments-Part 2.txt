SQL Server Lab Assignments-Part 2
SQL Server Assignments on Aggregate Queries (SUM, MIN, MAX, AVG)

create database SalesDatabase
use SalesDatabase

--Assignment 1: Sales Database

create table Sales(
	SalesID int primary key identity(1,1),
	 ProductID int ,
	 ProductName varchar(20),
	 QuantitySold int,
	 SaleAmount int,
	 SaleDate date
);

insert into Sales( ProductID, ProductName, QuantitySold, SaleAmount, SaleDate )
values (101,'Laptop', 5,5000,'2024-09-01'),
(102,'Mouse',10,250,'2024-09-02'),
(101,'Laptop',3,3000,'2024-09-03'),
(103,'Keyboard',8,800,'2024-09-04'),
(102,'Mouse',6,150,'2024-09-05');

select * from Sales

--calculate the total sales amount for all products (SUM). 
select SUM(SaleAmount) AS total_sales_amount from Sales 

--maximum quantity sold of any product (MAX). 
select MAX( QuantitySold) AS max_quantity_sold from Sales

--average sale amount per sale (AVG). 
select AVG(SaleAmount) AS average_sale_amount  from Sales

--minimum sale amount in the database (MIN). 
select MIN(SaleAmount) AS min_sale_amount  from Sales

--total quantity sold of a specific product, say "Laptop"
select SUM(QuantitySold) AS Quantity from Sales where  ProductName='Laptop'


--Assignment 2: Employee Salaries

create table Employees(
	 EmployeeID int primary key identity(1,1),
	 EmployeeName varchar(20),
	 Department varchar(20),
	 Salary int,
	 HireDate date
);

insert into Employees( EmployeeName, Department, Salary, HireDate  )
values ('John Doe ','IT',5000 ,'2022-01-10' ),
('Jane Smith ','HR',6000,'2021-03-15 '),
('Bob Johnson','Finance ',5500,'2020-06-20'),
('Alice Brown ','IT',6200,'2023-02-01'),
('Charlie White','Marketing',4800,'2023-03-10 ');

select * from Employees

--find the total salary expenditure for all employees (SUM).
select SUM(Salary) as total_salary from Employees
--find the highest salary among all employees (MAX). 
select MAX(Salary) as max_salary from Employees
--calculate the average salary across all employees (AVG). 
select AVG(Salary) as avg_salary from Employees
 --find the minimum salary in the IT department
 select MIN(Salary) as avg_salary from Employees where Department='IT'
 --find the total number of employees in each department 
 select Department,count(Department) as no_of_employees from Employees
 group by Department


 --Assignment 3: Inventory Management

create table Inventory(
	 ProductID int primary key identity(201,1),
	 ProductName varchar(20),
	 QuantityInStock int,
	 ReorderLevel int,
	 LastRestockDate date
);

insert into Inventory( ProductName, QuantityInStock, ReorderLevel, LastRestockDate )
values ('Monitor' ,50 ,10 ,'2024-08-25 '),
('Printer ',30 ,5 ,'2024-09-01 '),
('Mouse' ,100 ,15 ,'2024-09-10 '),
('Keyboard ',80 ,20,'2024-09-15'),
('Laptop' ,25 ,5,'2024-09-20');

select * from Inventory
 --find the total quantity of products in stock (SUM). 
 select SUM(QuantityInStock) as total_quantity from Inventory

 --find the product with the highest quantity in stock (MAX). 
 select ProductName, QuantityInStock from Inventory where  QuantityInStock= (select MAX(QuantityInStock) from Inventory)

  --find the average reorder level across all products (AVG). 
  select AVG(ReorderLevel) as average_reorder from Inventory

  --find the product with the lowest reorder level (MIN). 
  select ProductName,ReorderLevel from Inventory where ReorderLevel= (select MIN(ReorderLevel) from Inventory)

 --find the total quantity in stock for products where the quantity is less than the reorder level (SUM with WHERE clause). 
 select SUM(QuantityInStock) as total_quantity_stock from Inventory where QuantityInStock<ReorderLevel

 
 
 --Assignment 4: Customer Orders Database

 create table  CustomerOrders (
	OrderID int primary key identity(501,1),
	CustomerID varchar(20),
	OrderDate date,
	OrderAmount int,
	QuantityOrdered int
 );

 insert into  CustomerOrders(CustomerID, OrderDate, OrderAmount, QuantityOrdered)
 values ('C001','2024-09-10',1500 ,3),
	('C002','2024-09-11' ,2000 ,5),
	('C001','2024-09-12 ',1000 ,2),
	('C003', '2024-09-13', 2500, 4),
	('C002' ,'2024-09-14' ,3000 ,6);

select * from CustomerOrders
--total order amount for all orders (SUM). 
select SUM(OrderAmount) as TotalOrderAmount from CustomerOrders

--average order amount for all customers (AVG).
select AVG(OrderAmount) as AverageOrderAmount from CustomerOrders

-- maximum order amount from a single order (MAX).
select MIN(OrderAmount) as MinimumOrderAmount from CustomerOrders

--total quantity ordered across all orders (SUM).
select SUM(QuantityOrdered) as TotalQuantityOrdered from CustomerOrders

--minimum order amount in the database (MIN).
select MIN(OrderAmount) as MinimumOrderAmount from CustomerOrders



--Assignment 6: Product Ratings Database
create table ProductRatings (
	RatingID int primary key identity(1,1),
	ProductID varchar(20),
	CustomerID varchar(20),
	Rating int,
	ReviewDate date
);
insert into ProductRatings(ProductID ,CustomerID, Rating,ReviewDate)
values ('P001','C001',4,'2024-09-01'),
('P002','C002',5,'2024-09-02'),
('P001','C003',3,'2024-09-03'),
('P003','C001',2,'2024-09-04'),
('P002','C004',4,'2024-09-05');

select * from ProductRatings

--average rating for each product (AVG with GROUP BY). 
select ProductID, AVG(Rating) as AverageRating from ProductRatings group by ProductID

--highest rating given to any product (MAX). 
select MAX(Rating) as HighestRating from ProductRatings 
  
--lowest rating given to any product (MIN). 
select MIN(Rating) as LowesRating from ProductRatings

--total number of ratings for each product (COUNT and GROUP BY)
select ProductID,count(Rating) as TotalRatings from ProductRatings group by ProductID
	
--total number of products rated (COUNT with DISTINCT).
select count(distinct ProductID) as TotalProductsRated from ProductRatings

-------------------------------------------------------------------------------------------------------------------------------------

SQL Server assignments and solutions using various SQL operators such as IN, 
BETWEEN, LIKE, AND, OR, NOT, etc.
--Assignment 1:  
--Retrieve the names of employees who work in either the 'HR', 'Finance', or 'IT' departments.
use companyDB
select * from Employees where Department in ('HR','Finance','IT')
 
--Assignment 2:  
--Retrieve Products Within a Specific Price Range Using BETWEEN Operator 

use test
create table Products (
	ProductID int primary key identity(1,1), 
	ProductName varchar(20), 
	Price int
); 
insert into Products (ProductName, Price) 
values('Mouse',150),
('keyboard',200),
('pendrive',90);

select * from Products

select ProductName, Price from Products where Price BETWEEN 100 AND 500;

--Assignment 3:  
--Find Customers Whose Name Starts With 'A' Using LIKE Operator

create table Customers (
	CustomerID int primary key identity(1,1), 
	CustomerName varchar(20)
);
insert into Customers (CustomerName)
values('John Doe '),('Bob Johnson'),('Alice Brown ');

select * from Customers

select CustomerName from Customers where CustomerName LIKE 'A%';

--Assignment 4:  
--Retrieve Orders Placed on Specific Dates Using IN Operator

create table Orders (
	OrderID int primary key identity(1,1),
	OrderDate date
);
insert into Orders (OrderDate) 
values ( '2023-01-01'),('2023-02-01'), ('2023-03-01'),('2024-09-01');

select * from Orders

select OrderID from Orders where OrderDate IN ('2023-01-01', '2023-02-01', '2023-03-01');

--Assignment 5:  
--Retrieve Products That Are Not Priced Between 100 and 500 Using NOT BETWEEN Operator 

select * from Products

select ProductName, Price from Products where Price NOT BETWEEN 100 AND 500;

--Assignment 6:  
--Find Orders Where the Total Amount is More Than 5000 or Less Than 1000 Using OR Operator 

create table OrderDetails(
	OrderID int primary key identity(1,1),
	TotalAmount int
);
insert into OrderDetails(TotalAmount)
values (6000),(900),(3000),(3500);

select * from OrderDetails

select OrderID from OrderDetails where TotalAmount > 5000 OR TotalAmount < 1000;

--Assignment 7:  
--Retrieve Employees Who Do Not Work in the 'HR' or 'IT' Departments Using NOT IN Operator
use companyDB
select * from Employees
select * from Employees where Department NOT IN ('HR','IT')

--Assignment 8:  
--Retrieve Orders Placed in 2023 Using BETWEEN and AND Operators 
use test

select * from Orders

select OrderID from Orders where OrderDate BETWEEN '2023-01-01' AND '2023-12-31';

--Assignment 9:  
--Find Customers Who Do Not Have 'John' in Their Name Using NOT LIKE Operator

select * from Customers

select CustomerName from Customers where CustomerName NOT LIKE '%John%';

--Assignment 10:  
--Retrieve Products That Are Either in Category 'A' or Priced Below 100 Using IN and OR  Operators 

create table Categories(
	 CategoryID int primary key identity(1,1),
	 CategoryName varchar(20) 
);
insert into Categories (CategoryName)
values ( 'A'),('B'),('C');

create table ProductDetails(
	ProductID int primary key identity(101,1),
	ProductName varchar(20), 
	Price int,
	CategoryID int
	foreign key (CategoryID) references Categories(CategoryID) 
);

insert into ProductDetails(ProductName,Price, CategoryID)
values ('Mouse', 150,1),
('pen', 50,2),
('keyborad', 200,2),
('disk', 90, 1),
('printer', 300,3);

select * from Categories
select * from ProductDetails

select ProductName,Price from ProductDetails 
where price<100 or CategoryID=(select categoryID from Categories where CategoryName='A');

-------------------------------------------------------------------------------------------------------------------------------------

SQL Server assignments focused on using the ALTER TABLE command to perform various table modifications. 

--Assignment 1: Add a column DateOfBirth (data type DATE) to the Employees table to store employees' dates of birth. 
use SalesDatabase

select * from Employees

alter table Employees
add DateOfBirth date;


--Assignment 2: Modify Column Data Type
 --Change the data type of the PhoneNumber column in the Customers table to VARCHAR(15).
 
 use companyDB

 alter table Customer 
 alter column PhoneNumber Varchar(15)


--Assignment 3: Add a Primary Key 
--Task: Add a primary key to the DepartmentID column in the Departments table.

use SalesDatabase

create table Department(
DepartmentID int not null,
DepartmentName varchar(20)
);

alter table Department
add CONSTRAINT PK_department PRIMARY KEY(DepartmentID);

--Assignment 4: Drop a Column 
--Task: Remove the MiddleName column from the Employees table. 

use companyDB
select * from Employees

alter table Employees
add MiddleName varchar(50)

alter table Employees
drop column MiddleName

--Assignment 5: Add a Foreign Key 
--Add a foreign key to the EmployeeID column in the Orders table that references the EmployeeID column in the Employees table. 
select * from Employees
select * from Orders

alter table Orders
add constraint FK_order
foreign key (CustomerID) references Customer(CustomerID);

--Assignment 6: Drop a Foreign Key 
--Task: Remove the foreign key constraint that references EmployeeID from the Orders table.
alter table orders
drop constraint fk_order;

--Assignment 7: Rename a Column 
--Task: Rename the column FullName to EmployeeFullName in the Employees table. 
select * from Employees
Exec sp_rename 'Employees.FirstName','EmployeeFullName','column'

--Assignment 8: Add a Default Value 
--Task: Add a default value of 'Active' to the Status column in the Employees table.
alter table Employees
add Status1 varchar(20) 

alter table Employees
add constraint df_status
default 'active' for Status1;

select * from Employees

insert into Employees(EmployeeFullName,LastName,Department,Salary)
values ('manu','jose','marketing',9000);

--alter table Employees
--drop column Status1

--Assignment 9: Drop a Primary Key 
--Task: Drop the primary key constraint from the Departments table.
use SalesDatabase
alter table department
drop constraint pk_department

--Assignment 10: Add a Unique Constraint 
--Task: Ensure the Email column in the Employees table is unique by adding a unique constraint. 
use companyDB

select * from employees

create table employees1(
id int primary key,
email varchar(20) not null
);

alter table employees1
add constraint uq_email Unique(Email);

--alter table employees
--drop column Email


--Assignment 11: Add a Check Constraint 
--Task:  Add a check constraint to the Salary column in the Employees table to ensure that no salary is less than 1000. 
select * from employees

alter table Employees
add constraint chk_salary
check (Salary >= 1000);

insert into Employees(EmployeeFullName,LastName,Department,Salary)
values ('manu','jose','finance',900);

--insert into Employees(EmployeeFullName,LastName,Department,Salary)
--values ('mathew','jose','IT',9000);

--Assignment 12: Drop a Check Constraint 
--Task: Remove the check constraint from the Salary column in the Employees table.
alter table Employees
drop constraint chk_salary;


-------------------------------------------------------------------------------------------------------------------------------------

--SQL Server assignments involving subqueries. 

--Assignment 1:  Retrieve Employees Who Earn More Than the Average Salary 
use SalesDatabase
select * from Employees
select avg(salary) as avg_salary from Employees

select EmployeeName,Salary from Employees
where Salary>(select avg(salary) from Employees)

--Assignment 2:  Find Departments with More Than 5 Employees
use SalesDatabase
select * from Employees
select * from Department

select DepartmentName from Department
where DepartmentID=(
select Department from Employees group by Department having COUNT(EmployeeID) > 5);



--Assignment 3: Retrieve Products with a Price Higher Than the Maximum Price of Category 'A'
use test
select * from Categories
select * from ProductDetails

select productname,price from ProductDetails
where price>(select max(price) from ProductDetails where CategoryID=(select categoryID from Categories where CategoryName='A'));


--Assignment 4:  
--Retrieve Employees Who Work in Departments with Average Salary Higher Than 50,000
use SalesDatabase
select * from Employees
select * from Department

select EmployeeName from Employees where Department IN (
    select Department from Employees group by Department having AVG(Salary) > 50000
);

--Assignment 5:  
--Find Employees Who Earn More Than Their Department's Average Salary

use SalesDatabase
select * from Employees

select EmployeeName from Employees where Salary > ( select AVG(Salary) from Employees where Department=Employees.Department);

--Assignment 6:  
--Find Customers Who Have Not Placed Any Orders 
--Task: Retrieve the names of customers who have not placed any orders. 
use companyDB
select * from Customer
select * from Orders

select customerName from Customer where CustomerID not in (select CustomerID from orders)

--Assignment 7:  
--Retrieve Top 3 Highest-Paid Employees in Each Department 
--Task: Retrieve the top 3 highest-paid employees in each department.

use SalesDatabase
select * from Employees
select * from Department


--Assignment 8:  
--Find Products That Have Never Been Ordered 
--Task: Retrieve the names of products that have never been ordered.

use companyDB
select * from OrderDetails
select * from products

select productname from Products where productid not in (select ProductID from OrderDetails)

-------------------------------------------------------------------------------------------------------------------------------------

SQL Server assignments that focus on different types of joins (INNER  JOIN, LEFT JOIN, RIGHT JOIN, FULL OUTER JOIN, CROSS JOIN)
--JOINS
--Assignment 1:  
--Retrieve Employees and Their Department Names (INNER JOIN) 
--Task: Retrieve the employee names and their corresponding department names.

use SalesDatabase
select * from Employees
select * from department

select E.employeename,D.DepartmentName
from Employees E
inner join Department D
on E.Department=d.DepartmentID

--Assignment 2: 
--Retrieve All Employees and Their Department Names, Including Those Without Departments 
--Task: Retrieve the employee names and their corresponding department names. Include employees who are not assigned to any department.

use SalesDatabase
select * from Employees
select * from department

select E.EmployeeName,D.DepartmentName
from Employees E
left join Department D
on E.Department=d.DepartmentID

--Assignment 3:  
--Retrieve All Departments and the Employees Working in Them 
--Task: Retrieve all departments and their respective employees. Include departments even if they 
--don t have any employees. 
use SalesDatabase
select * from Employees
select * from department

select E.employeename,D.DepartmentName
from Employees E
right join Department D
on E.Department=d.DepartmentID


--Assignment 4:  
--Retrieve All Employees and Departments, Including Those Without Matches (FULL OUTER JOIN) 
--Task: Retrieve all employees and all departments, including employees without a department and departments without employees.

use SalesDatabase
select * from Employees
select * from department

select E.employeename,D.DepartmentName
from Employees E
full outer join Department D
on E.Department=d.DepartmentID

--Assignment 5:  
--Retrieve Orders and the Customers Who Placed Them (INNER JOIN) 
--Task: Retrieve order IDs and customer names for all orders.

use companyDB
select * from Orders
select * from Customer

select o.orderid,c.customername
from Orders o
inner join Customer c
on o.CustomerID=c.customerid


--Assignment 6:  
--Retrieve Orders and Customers, Including Customers Without Orders 
--Task: Retrieve all customers and their respective orders. Include customers even if they haven t placed any orders.

use companyDB
select * from Customer
select * from Orders

select c.customername,o.orderid
from Customer c
left join orders o
on c.CustomerID=o.customerid

--Assignment 7:  
--Retrieve Products and Their Categories (INNER JOIN) 
--Task: Retrieve product names and their respective category names.

use test
select * from ProductDetails
select * from Categories

select p.productname,c.CategoryName
from ProductDetails p
inner join categories c
on p.CategoryID=c.CategoryID

--Assignment 8:  
--Retrieve All Categories and Products, Including Categories Without Products 
--Task: Retrieve all categories and the products in each category. Include categories that don t have any products. 

use test
select * from ProductDetails
select * from Categories

select p.productname,c.categoryname
from ProductDetails p
right join Categories c
on p.CategoryID=c.CategoryID

--Assignment 9:  
--Retrieve Employees and Their Managers (Self-Join) 
--Task: Retrieve the employee names and the names of their managers. 

use test2
select * from Employee

select e.employeename as employee , m.employeename as manager
from Employee e
inner join Employee m
on e.manageId=m.employeeId

--Assignment 10:  
--Get All Possible Combinations of Products and Orders (CROSS JOIN) 
--Task: Retrieve all possible combinations of products and orders (cartesian product).

use test
select * from Products
select * from Orders

select p.ProductName, o.OrderID
from Products p
cross join  orders o;

--------------------------------------------------------------------------------------------------------------

--SQL Server assignments using the GROUP BY and HAVING clauses

--Assignment 1:   
--Task: Retrieve the department name and the average salary of employees in each department. 
--Only display departments where the average salary is greater than 50,000.



use SalesDatabase
select * from Employees
select * from Department

select d.departmentid, avg(e.salary)
from Employees e
join Department d
on e.Department=d.DepartmentID
group by DepartmentID
having avg(e.salary)>50000

--Assignment 1:  
--Retrieve the names of employees who work in either the 'HR', 'Finance', or 'IT' departments.
use companyDB
select * from Employees where Department in ('HR','Finance','IT')
 
--Assignment 2:  
--Retrieve Products Within a Specific Price Range Using BETWEEN Operator 

use test
create table Products (
	ProductID int primary key identity(1,1), 
	ProductName varchar(20), 
	Price int
); 
insert into Products (ProductName, Price) 
values('Mouse',150),
('keyboard',200),
('pendrive',90);

select * from Products

select ProductName, Price from Products where Price BETWEEN 100 AND 500;

--Assignment 3:  
--Find Customers Whose Name Starts With 'A' Using LIKE Operator

create table Customers (
	CustomerID int primary key identity(1,1), 
	CustomerName varchar(20)
);
insert into Customers (CustomerName)
values('John Doe '),('Bob Johnson'),('Alice Brown ');

select * from Customers

select CustomerName from Customers where CustomerName LIKE 'A%';

--Assignment 4:  
--Retrieve Orders Placed on Specific Dates Using IN Operator

create table Orders (
	OrderID int primary key identity(1,1),
	OrderDate date
);
insert into Orders (OrderDate) 
values ( '2023-01-01'),('2023-02-01'), ('2023-03-01'),('2024-09-01');

select * from Orders

select OrderID from Orders where OrderDate IN ('2023-01-01', '2023-02-01', '2023-03-01');

--Assignment 5:  
--Retrieve Products That Are Not Priced Between 100 and 500 Using NOT BETWEEN Operator 

select * from Products

select ProductName, Price from Products where Price NOT BETWEEN 100 AND 500;

--Assignment 6:  
--Find Orders Where the Total Amount is More Than 5000 or Less Than 1000 Using OR Operator 

create table OrderDetails(
	OrderID int primary key identity(1,1),
	TotalAmount int
);
insert into OrderDetails(TotalAmount)
values (6000),(900),(3000),(3500);

select * from OrderDetails

select OrderID from OrderDetails where TotalAmount > 5000 OR TotalAmount < 1000;

--Assignment 7:  
--Retrieve Employees Who Do Not Work in the 'HR' or 'IT' Departments Using NOT IN Operator
use companyDB
select * from Employees
select * from Employees where Department NOT IN ('HR','IT')

--Assignment 8:  
--Retrieve Orders Placed in 2023 Using BETWEEN and AND Operators 
use test

select * from Orders

select OrderID from Orders where OrderDate BETWEEN '2023-01-01' AND '2023-12-31';

--Assignment 9:  
--Find Customers Who Do Not Have 'John' in Their Name Using NOT LIKE Operator

select * from Customers

select CustomerName from Customers where CustomerName NOT LIKE '%John%';

--Assignment 10:  
--Retrieve Products That Are Either in Category 'A' or Priced Below 100 Using IN and OR  Operators 

create table Categories(
	 CategoryID int primary key identity(1,1),
	 CategoryName varchar(20) 
);
insert into Categories (CategoryName)
values ( 'A'),('B'),('C');

create table ProductDetails(
	ProductID int primary key identity(101,1),
	ProductName varchar(20), 
	Price int,
	CategoryID int
	foreign key (CategoryID) references Categories(CategoryID) 
);

insert into ProductDetails(ProductName,Price, CategoryID)
values ('Mouse', 150,1),
('pen', 50,2),
('keyborad', 200,2),
('disk', 90, 1),
('printer', 300,3);

select * from Categories
select * from ProductDetails

select ProductName,Price from ProductDetails 
where price<100 or CategoryID=(select categoryID from Categories where CategoryName='A');

--Assignment 1: Add a column DateOfBirth (data type DATE) to the Employees table to store employees' dates of birth. 
use SalesDatabase

select * from Employees

alter table Employees
add DateOfBirth date;


--Assignment 2: Modify Column Data Type
 --Change the data type of the PhoneNumber column in the Customers table to VARCHAR(15).
 
 use companyDB

 alter table Customer 
 alter column PhoneNumber Varchar(15)


--Assignment 3: Add a Primary Key 
--Task: Add a primary key to the DepartmentID column in the Departments table.

use SalesDatabase

create table Department(
DepartmentID int not null,
DepartmentName varchar(20)
);

alter table Department
add CONSTRAINT PK_department PRIMARY KEY(DepartmentID);

--Assignment 4: Drop a Column 
--Task: Remove the MiddleName column from the Employees table. 

use companyDB
select * from Employees

alter table Employees
add MiddleName varchar(50)

alter table Employees
drop column MiddleName

--Assignment 5: Add a Foreign Key 
--Add a foreign key to the EmployeeID column in the Orders table that references the EmployeeID column in the Employees table. 
select * from Employees
select * from Orders

alter table Orders
add constraint FK_order
foreign key (CustomerID) references Customer(CustomerID);

--Assignment 6: Drop a Foreign Key 
--Task: Remove the foreign key constraint that references EmployeeID from the Orders table.
alter table orders
drop constraint fk_order;

--Assignment 7: Rename a Column 
--Task: Rename the column FullName to EmployeeFullName in the Employees table. 
select * from Employees
Exec sp_rename 'Employees.FirstName','EmployeeFullName','column'

--Assignment 8: Add a Default Value 
--Task: Add a default value of 'Active' to the Status column in the Employees table.
alter table Employees
add Status1 varchar(20) 

alter table Employees
add constraint df_status
default 'active' for Status1;

select * from Employees

insert into Employees(EmployeeFullName,LastName,Department,Salary)
values ('manu','jose','marketing',9000);

--alter table Employees
--drop column Status1

--Assignment 9: Drop a Primary Key 
--Task: Drop the primary key constraint from the Departments table.
use SalesDatabase
alter table department
drop constraint pk_department

--Assignment 10: Add a Unique Constraint 
--Task: Ensure the Email column in the Employees table is unique by adding a unique constraint. 
use companyDB

select * from employees

create table employees1(
id int primary key,
email varchar(20) not null
);

alter table employees1
add constraint uq_email Unique(Email);

--alter table employees
--drop column Email


--Assignment 11: Add a Check Constraint 
--Task:  Add a check constraint to the Salary column in the Employees table to ensure that no salary is less than 1000. 
select * from employees

alter table Employees
add constraint chk_salary
check (Salary >= 1000);

insert into Employees(EmployeeFullName,LastName,Department,Salary)
values ('manu','jose','finance',900);

--insert into Employees(EmployeeFullName,LastName,Department,Salary)
--values ('mathew','jose','IT',9000);

--Assignment 13: Drop a Check Constraint 
--Task: Remove the check constraint from the Salary column in the Employees table.
alter table Employees
drop constraint chk_salary;



--SQL Server assignments involving subqueries. 

--Assignment 1:  Retrieve Employees Who Earn More Than the Average Salary 
use SalesDatabase
select * from Employees
select avg(salary) as avg_salary from Employees

select EmployeeName,Salary from Employees
where Salary>(select avg(salary) from Employees)

--Assignment 2:  Find Departments with More Than 5 Employees
use SalesDatabase
select * from Employees
select * from Department

select DepartmentName from Department
where DepartmentID=(
select Department from Employees group by Department having COUNT(EmployeeID) > 5);



--Assignment 3: Retrieve Products with a Price Higher Than the Maximum Price of Category 'A'
use test
select * from Categories
select * from ProductDetails

select productname,price from ProductDetails
where price>(select max(price) from ProductDetails where CategoryID=(select categoryID from Categories where CategoryName='A'));


--Assignment 4:  
--Retrieve Employees Who Work in Departments with Average Salary Higher Than 50,000
use SalesDatabase
select * from Employees
select * from Department

select EmployeeName from Employees where Department IN (
    select Department from Employees group by Department having AVG(Salary) > 50000
);

--Assignment 5:  
--Find Employees Who Earn More Than Their Department's Average Salary

use SalesDatabase
select * from Employees

select EmployeeName from Employees where Salary > ( select AVG(Salary) from Employees where Department=Employees.Department);

--Assignment 6:  
--Find Customers Who Have Not Placed Any Orders 
--Task: Retrieve the names of customers who have not placed any orders. 
use companyDB
select * from Customer
select * from Orders

select customerName from Customer where CustomerID not in (select CustomerID from orders)

--Assignment 7:  
--Retrieve Top 3 Highest-Paid Employees in Each Department 
--Task: Retrieve the top 3 highest-paid employees in each department.

use SalesDatabase
select * from Employees
select * from Department


--Assignment 8:  
--Find Products That Have Never Been Ordered 
--Task: Retrieve the names of products that have never been ordered.

use companyDB
select * from OrderDetails
select * from products

select productname from Products where productid not in (select ProductID from OrderDetails)


--JOINS
--Assignment 1:  
--Retrieve Employees and Their Department Names (INNER JOIN) 
--Task: Retrieve the employee names and their corresponding department names.

use SalesDatabase
select * from Employees
select * from department

select E.employeename,D.DepartmentName
from Employees E
inner join Department D
on E.Department=d.DepartmentID

--Assignment 2: 
--Retrieve All Employees and Their Department Names, Including Those Without Departments 
--Task: Retrieve the employee names and their corresponding department names. Include employees who are not assigned to any department.

use SalesDatabase
select * from Employees
select * from department

select E.EmployeeName,D.DepartmentName
from Employees E
left join Department D
on E.Department=d.DepartmentID

--Assignment 3:  
--Retrieve All Departments and the Employees Working in Them 
--Task: Retrieve all departments and their respective employees. Include departments even if they 
--don’t have any employees. 
use SalesDatabase
select * from Employees
select * from department

select E.employeename,D.DepartmentName
from Employees E
right join Department D
on E.Department=d.DepartmentID


--Assignment 4:  
--Retrieve All Employees and Departments, Including Those Without Matches (FULL OUTER JOIN) 
--Task: Retrieve all employees and all departments, including employees without a department and departments without employees.

use SalesDatabase
select * from Employees
select * from department

select E.employeename,D.DepartmentName
from Employees E
full outer join Department D
on E.Department=d.DepartmentID

--Assignment 5:  
--Retrieve Orders and the Customers Who Placed Them (INNER JOIN) 
--Task: Retrieve order IDs and customer names for all orders.

use companyDB
select * from Orders
select * from Customer

select o.orderid,c.customername
from Orders o
inner join Customer c
on o.CustomerID=c.customerid


--Assignment 6:  
--Retrieve Orders and Customers, Including Customers Without Orders 
--Task: Retrieve all customers and their respective orders. Include customers even if they haven’t placed any orders.

use companyDB
select * from Customer
select * from Orders

select c.customername,o.orderid
from Customer c
left join orders o
on c.CustomerID=o.customerid

--Assignment 7:  
--Retrieve Products and Their Categories (INNER JOIN) 
--Task: Retrieve product names and their respective category names.

use test
select * from ProductDetails
select * from Categories

select p.productname,c.CategoryName
from ProductDetails p
inner join categories c
on p.CategoryID=c.CategoryID

--Assignment 8:  
--Retrieve All Categories and Products, Including Categories Without Products 
--Task: Retrieve all categories and the products in each category. Include categories that don’t have any products. 

use test
select * from ProductDetails
select * from Categories

select p.productname,c.categoryname
from ProductDetails p
right join Categories c
on p.CategoryID=c.CategoryID

--Assignment 9:  
--Retrieve Employees and Their Managers (Self-Join) 
--Task: Retrieve the employee names and the names of their managers. 

use test2
select * from Employee

select e.employeename as employee , m.employeename as manager
from Employee e
inner join Employee m
on e.manageId=m.employeeId

--Assignment 10:  
--Get All Possible Combinations of Products and Orders (CROSS JOIN) 
--Task: Retrieve all possible combinations of products and orders (cartesian product).

use test
select * from Products
select * from Orders

select p.ProductName, o.OrderID
from Products p
cross join  orders o;


--SQL Server assignments using the GROUP BY and HAVING clauses

--Assignment 1:   
--Task: Retrieve the department name and the average salary of employees in each department. 
--Only display departments where the average salary is greater than 50,000.



use SalesDatabase
select * from Employees
select * from Department

select d.departmentid, avg(e.salary)
from Employees e
join Department d
on e.Department=d.DepartmentID
group by DepartmentID
having avg(e.salary)>50000



--Assignment 2:  
--Task: Retrieve the department name and the total number of employees in each department. 
--Only display departments that have more than 5 employees.


use SalesDatabase
select * from Employees
select * from Department 

select d.DepartmentName, count(e.EmployeeID) as TotalEmployees
from Employees e
join department d
on e.Department=d.DepartmentID
group by d.DepartmentName
HAVING COUNT(e.EmployeeID) > 5;

--Assignment 3:  
--Task: Retrieve the department name, maximum salary, and minimum salary for each department. 
--Only include departments where the minimum salary is greater than 30,000

use SalesDatabase
select * from Employees
select * from Department 

select d.DepartmentName, max(e.salary) as max_salary,min(e.salary) as min_salary
from Employees e
join department d
on e.Department=d.DepartmentID
group by d.DepartmentName
having min(e.salary)>30000;

--Assignment 4:  
--Task: Retrieve the employee name and total sales made by each salesperson.
--Only display salespersons who have made total sales of more than 100,000. 

use SalesDatabase
select * from Employees
select * from sales1

select e.EmployeeName, sum(s.amount) as total_sale
from employees e
join sales1 s 
on e.EmployeeID = s.EmployeeID
group by e.EmployeeID, e.EmployeeName
having sum(s.amount) > 100000;


--Assignment 5:  
--Task: Retrieve the customer name and the total number of orders placed by each customer.
--Only display customers who have placed more than 3 orders. 

use companyDB
select * from orders
select * from Customer

select c.CustomerName, count(o.OrderID) as TotalOrders
from Orders o
join Customer c 
on o.CustomerID = c.CustomerID
group by c.CustomerID, c.CustomerName
having count(o.OrderID) > 3;
